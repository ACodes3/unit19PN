#include <iostream>
#include <vector>
#include <chrono>
#include <algorithm>

template <typename T>
class Stack {
public:
    Stack();
    virtual ~Stack();
    void push(T el);
    T pop();
    int count();

private:
    void resize(int new_size);
    T* m_pElements = nullptr;
    int m_iSize = 0;
    int m_iTop = 0;
};

template <typename T>
Stack<T>::Stack() {
    m_iSize = 10;
    m_pElements = new T[m_iSize];
}

template <typename T>
Stack<T>::~Stack() {
    delete[] m_pElements;
}

template <typename T>
void Stack<T>::push(T el) {
    if (m_iTop == m_iSize) {
        resize(2 * m_iSize);
    }
    m_pElements[m_iTop++] = el;
}

template <typename T>
T Stack<T>::pop() {
    if (m_iTop == 0) {
        throw std::out_of_range("Prazni sklad!");
    }

    T element = m_pElements[--m_iTop];

    if (m_iTop <= m_iSize / 4 && m_iSize > 10) {
        resize(m_iSize / 2);
    }

    return element;
}

template <typename T>
int Stack<T>::count() {
    return m_iTop;
}

template <typename T>
void Stack<T>::resize(int new_size) {
    T* new_elements = new T[new_size];
    for (int i = 0; i < m_iTop; ++i) {
        new_elements[i] = m_pElements[i];
    }
    delete[] m_pElements;
    m_pElements = new_elements;
    m_iSize = new_size;
}

template <typename T>
void insertionSort(std::vector<T>& v) {
    int n = v.size();
    for (int i = 1; i < n; ++i) {
        T key = v[i];
        int j = i - 1;
        while (j >= 0 && v[j] > key) {
            v[j + 1] = v[j];
            --j;
        }
        v[j + 1] = key;
    }
}

template <typename T>
void merge(std::vector<T>& v, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    std::vector<T> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = v[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = v[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            v[k] = L[i];
            ++i;
        } else {
            v[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        v[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        v[k] = R[j];
        ++j;
        ++k;
    }
}

template <typename T>
void mergeSortHelper(std::vector<T>& v, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSortHelper(v, l, m);
        mergeSortHelper(v, m + 1, r);

        merge(v, l, m, r);
    }
}

template <typename T>
void mergeSort(std::vector<T>& v) {
    int n = v.size();
    mergeSortHelper(v, 0, n - 1);
}

int main() {
    Stack<int> stack;
    stack.push(5);
    stack.push(2);
    stack.push(8);
    stack.push(1);
    stack.push(3);

    std::cout << "Število elementov v skladu: " << stack.count() << std::endl;

    std::cout << "Izbrisan element iz sklada: " << stack.pop() << std::endl;

    std::cout << "Število elementov v skladu po izbrisu: " << stack.count() << std::endl;

    //sortiranje - insertion
    std::vector<int> vec = {12, 1, 2, 4, 6, 8, 11, 20, 21, 21, 5};
    std::vector<int> unsortedVec = vec;

    // čas izvajanja
    auto start = std::chrono::steady_clock::now();
    insertionSort(vec);
    auto end = std::chrono::steady_clock::now();
    std::cout << "Čas izvajanja: "
              << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count()
              << " microseconds" << std::endl;
    std::cout << "Neurejnega: : ";
    for (auto& elem : unsortedVec)
        std::cout << elem << " ";
    std::cout << std::endl;
    std::cout << "Urejenega z insertion ";
    for (auto& elem : vec)
        std::cout << elem << " ";
    std::cout << std::endl;

    // Reset
    vec = unsortedVec;

    // Čas izvajanja - merge sort
    start = std::chrono::steady_clock::now();
    mergeSort(vec);
    end = std::chrono::steady_clock::now();
    std::cout << "Čas izvajanja: "
              << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count()
              << " microseconds" << std::endl;
    std::cout << "Neurejenega: ";
    for (auto& elem : unsortedVec)
        std::cout << elem << " ";
    std::cout << std::endl;
    std::cout << "Urejenega z merge sort ";
    for (auto& elem : vec)
        std::cout << elem << " ";
    std::cout << std::endl;

    return 0;
}

// Težave:
// 1. Vstavljanje novega elementa na koncu bi bilo neučinkovito, ker bi za vsako vstavljanje bo treba premakniti vsak drugi element.
// 2. Odstranjevanje elementa z začetka bi zahtevalo premikanje vsakega drugega elementa, kar bi trajalo dolgo, zlasti pri velikih skladov.
// Ko se sklad napolni, povečamo njegovo zmogljivost za 100 %, ker s tem zmanjšamo potrebo po prerazporeditvah, kar povečuje učinkovitost, saj je prerazporeditev drag postopek.

// Dijkstrov algoritem:
// Dijkstrov algoritem se uporablja za izračun najkrajše poti v grafu. Ta algoritem se lahko uporabi za določitev najkrajše poti med vozlišči grafa,
// ki imajo težave s povezavami. Metoda v vsakem koraku izbere vozlišče, ki je najbližje začetnemu vozlišču, in če so nove razdalje manjše od znanih razdalj,
// izbrano vozlišče posodobi razdalje do sosednjih vozlišč. Ta postopek se ponavlja, dokler ni obdelano vsako vozlišče.

// Algoritem se začne v prvem vozlišču in izbira vozlišče, ki mu je najbližje, dokler ne pride do zadnjega vozlišča ali ne obdela vsakega vozlišča.
