#include <QCoreApplication>
#include <iostream>
#include <vector>
#include <chrono>
#include <algorithm>

template <typename T>
class Stack {
public:
    Stack();
    virtual ~Stack();
    void push(T el);
    T pop();
    int count();

private:
    void resize(int new_size);
    QVector<T> m_elements;
    int m_size = 0;
    int m_top = 0;
};

template <typename T>
Stack<T>::Stack() {
    m_size = 10;
    m_elements.resize(m_size);
}

template <typename T>
Stack<T>::~Stack() {
}

template <typename T>
void Stack<T>::push(T el) {
    if (m_top == m_size) {
        resize(2 * m_size);
    }
    m_elements[m_top++] = el;
}

template <typename T>
T Stack<T>::pop() {
    if (m_top == 0) {
        throw std::out_of_range("Prazen sklad!");
    }

    T element = m_elements[--m_top];

    if (m_top <= m_size / 4 && m_size > 10) {
        resize(m_size / 2);
    }

    return element;
}

template <typename T>
int Stack<T>::count() {
    return m_top;
}

template <typename T>
void Stack<T>::resize(int new_size) {
    m_elements.resize(new_size);
    m_size = new_size;
}

template <typename T>
void insertionSort(QVector<T>& v) {
    int n = v.size();
    for (int i = 1; i < n; ++i) {
        T key = v[i];
        int j = i - 1;
        while (j >= 0 && v[j] > key) {
            v[j + 1] = v[j];
            --j;
        }
        v[j + 1] = key;
    }
}

template <typename T>
void merge(QVector<T>& v, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    QVector<T> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = v[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = v[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            v[k] = L[i];
            ++i;
        } else {
            v[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        v[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        v[k] = R[j];
        ++j;
        ++k;
    }
}

template <typename T>
void mergeSortHelper(QVector<T>& v, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSortHelper(v, l, m);
        mergeSortHelper(v, m + 1, r);

        merge(v, l, m, r);
    }
}

template <typename T>
void mergeSort(QVector<T>& v) {
    int n = v.size();
    mergeSortHelper(v, 0, n - 1);
}

int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    Stack<int> stack;
    stack.push(5);
    stack.push(2);
    stack.push(8);
    stack.push(1);
    stack.push(3);

    std::cout << "Število elementov v skladu: " << stack.count() << std::endl;

    std::cout << "Izbrisani element: " << stack.pop() << std::endl;

    std::cout << "Število elementov v skaldu po izbrisu: " << stack.count() << std::endl;

    // Urejanje - inseriton
    QVector<int> vec = {12, 1, 2, 4, 6, 8, 11, 20, 21, 21, 5};
    QVector<int> unsortedVec = vec;

    // Čas izvajannja - insertion sort
    auto start = std::chrono::steady_clock::now();
    insertionSort(vec);
    auto end = std::chrono::steady_clock::now();
    std::cout << "Čas izvajanja: "
              << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count()
              << " microseconds" << std::endl;
    std::cout << "Neurejenega:: ";
    for (auto& elem : unsortedVec)
        std::cout << elem << " ";
    std::cout << std::endl;
    std::cout << "Urejenega z insertion: ";
    for (auto& elem : vec)
        std::cout << elem << " ";
    std::cout << std::endl;

    // Reset
    vec = unsortedVec;

    // Čas izvajanja - merge sort
    start = std::chrono::steady_clock::now();
    mergeSort(vec);
    end = std::chrono::steady_clock::now();
    std::cout << "Čas izvajanja: "
              << std::chrono::duration_cast<std::chrono::microseconds>(end - start).count()
              << " microseconds" << std::endl;
    std::cout << "Neurejenega: ";
    for (auto& elem : unsortedVec)
        std::cout << elem << " ";
    std::cout << std::endl;
    std::cout << "Urejenega z merge urejanje: ";
    for (auto& elem : vec)
        std::cout << elem << " ";
    std::cout << std::endl;

    return a.exec();
}
